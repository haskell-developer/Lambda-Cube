#+TITLE:     Interpreting and Typechecking Simply Typed Lambda Calculus
#+AUTHOR:    Solomon Bothwell
#+EMAIL:     ssbothwell@gmail.com
#+DATE:      2020-03-02
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+startup: beamer
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+LATEX_HEADER: \usepackage[linenos=true]{minted}
#+LATEX_HEADER: \usepackage{bussproofs}
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usemintedstyle{borland}

* Untyped Lambda Calculus
  A formal system for expressing computation using function abstraction,
  application, and reduction.
* Syntax 
- Variables: $x$
- Lambda Abstractions: $\lambda x.x$
- Application: $t_1 t_2$
* Reduction
  - Alpha Conversion (name changes)
  - Beta Reduction (applying functions to their arguments)
  - Eta Reduction (reducing abstraction around a function) 
* Example Terms
  - $id := \lambda x.x$
  - $const := \lambda a.\lambda b.a$
  - $Z := \lambda f.\lambda x.x$
  - $S\,Z := \lambda f.\lambda x.f\,x$
  - $S\,S\,Z := \lambda f.\lambda x.f\,f\,x$
  - $True := \lambda p.\lambda q.p$
  - $False := \lambda p.\lambda q.q$
  - $Not := \lambda p.p\,False\,True$
  - $Or := \lambda p.\lambda q.p\,p\,q$
* Sample reduction
  \center{Not True} \\
  $\color{red}(\lambda p.p (\lambda p.\lambda q.q) (\lambda p.\lambda q.p))\,\color{blue}(\lambda p.\lambda q.p)$ \\
  $\color{red}(\lambda p.p (\lambda x.\lambda y.y) (\lambda f.\lambda g.f))\,\color{blue}(\lambda a.\lambda b.a)$ \\
  $\color{blue}(\lambda a.\lambda b.a) \color{red}(\lambda x.\lambda y.y)\,(\lambda f.\lambda g.f)$ \\
  $\color{blue}(\lambda b.\color{red}(\lambda x.\lambda y.y)\color{blue})\,\color{red}(\lambda f.\lambda g.f)$ \\
  $\color{red}\lambda x.\lambda y.y$
* How powerful is this?
  Very powerful. Fully isomorphic to turing machines. 
* Evaluation Semantics
** Operational Semantics - Intensional | How
   Create an abstract state machine consisting of terms as state and reduction
   rules for terms which can be followed in sequence to reach some halting
   state.
** Denotational Semantics - Extensional | What
   Create a mapping to a mathematical domain that denotes the meanings of terms.
* Small Step/Big Step
  Operational Semantics comes in two flavors: 
  - Small Step: describe individual steps of computation. 
  - Big Step: describe the overall result of execution.
* Untyped Lambda Calculus
** Left                                                               :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.4
   :BEAMER_opt: [t]
   :END:
*** Syntax
   \bigskip 
   \begin{itemize}
   \item[$t :=$] $x$
   \item[] $\lambda x.t$
   \item[] $t_1\,t_2$
   \end{itemize}
   \begin{itemize}
   \item[$v :=$] $\lambda x.t$
   \end{itemize}
** Right                                                              :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.6
   :BEAMER_opt: [t]
   :END:
*** Evaluation
   \begin{prooftree}
   \RightLabel{E-App1}
   \AxiomC{$ t_1 \to t_1' $}
   \UnaryInfC{$ t_1 t_2 \to t_1' t_2 $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{E-App2}
   \AxiomC{$ t_2 \to t_2' $}
   \UnaryInfC{$ v_1 t_2 \to v_1 t_2' $}
   \DisplayProof
   \end{prooftree}
   
   $(\lambda x . t_1_2)v_2 \to [x  \mapsto v_2]t_1_2$ E-AppAbs
* Substitution Rules
   - $[x \mapsto s]x = s$
   - $[x \mapsto s]y = y \hspace{115pt}if\,y \ne x$
   - $[x \mapsto s](\lambda y.t_1) = \lambda y. [x \mapsto s]t_1 \hspace{35pt}if\,y \ne x \, and \,y \notin fv(s)$ 
   - $[x \mapsto s](t_1 t_2) = ([x \mapsto s]t_1)\,([x \mapsto s]t_2)$
** Notes
   :PROPERTIES:
   :BEAMER_ENV: note
   :END:
   [x -> y z](\y.x y)
   [x -> y z](\w.x w)
   (\w.y z w)
* Avoiding Name Collisions In Substitution
** Given Expression:
\color{red}$(\lambda.x\lambda y. (\lambda x.x)\,y\,x)\, \color{blue}(\lambda y.y\,(\lambda x.x))$
* Avoiding Name Collisions In Substitution
** Given Expression:
\color{red}$(\lambda x.\lambda y. (\lambda x.x)\,y\,x)\, \color{blue}(\lambda y.y\,(\lambda x.x))$
** Evaluation Rule: E-AppAbs
\color{red}$(\lambda x . t_1_2)\color{blue}v_2 \color{black}\to [x  \mapsto v_2]t_1_2$
* Avoiding Name Collisions In Substitution
** Given Expression:
\color{red}$(\lambda x.\lambda y. (\lambda x.x)\,y\,x)\, \color{blue}(\lambda y.y\,(\lambda x.x))$
** Evaluation Rule:
$E-AppAbs:\,\color{red}(\lambda x . t_1_2)\color{blue}v_2 \color{black}\to [x  \mapsto v_2]t_1_2$
** Our substitution:
$[x \mapsto \color{blue}(\lambda y.y\,(\lambda x.x))\color{black}]\color{red}(\lambda y. (\lambda x.x)\,y\,x)$
* Avoiding Name Collisions In Substitution
** Given Expression:
\color{red}$(\lambda x.\lambda y. (\lambda x.x)\,y\,x)\, \color{blue}(\lambda y.y\,(\lambda x.x))$
** Evaluation Rule:
$E-AppAbs:\,\color{red}(\lambda x . t_1_2)\color{blue}v_2 \color{black}\to [x  \mapsto v_2]t_1_2$
** Our substitution:
$[x \mapsto \color{blue}(\lambda y.y\,(\lambda x.x))\color{black}]\color{red}(\lambda y. (\lambda x.x)\,y\,x)$
** Our Desired Final Value:
\color{red}$(\lambda y. (\lambda x.x)\,y\,\color{blue}(\lambda y.y\,(\lambda x.x))\color{red})$
* Avoiding Name Collisions In Substitution
** How do we perform this substitution without capturing free variables?
* Avoiding Name Collisions In Substitution
** How do we perform this substitution without capturing free variables?
** Two Options:
1. Identify free variables and use Alpha Conversion to prevent shadowing.\\
2. Convert our Lambda Terms to Nameless Form using DeBruijn Indices.
* Avoiding Name Collisions In Substitution
** Capture Avoiding Substitution
   1. Given the substitution $[\color{red}x  \color{black}\mapsto \color{blue}v_2\color{black}]\color{purple}t_1_2$
   2. Identify all the bound variables in $\color{purple}t_1_2$.
   3. Rename all bound variables inside $\color{purple}t_1_2$ with \emph{fresh} variables.
   4. Perform the substitution of $\color{blue}v_2$ for $\color{red}x$ in $\color{purple}t_1_2$.
** Nameless Form (DeBruijn Indices)
In nameless form variable names are replaced by natural numbers representing the
number of lambda abstractions between the variable and its binder.

Examples:
- \color{red}$\lambda x.\color{blue}\lambda y.\color{red}x \color{black}\longrightarrow \color{red}\lambda\color{black}\color{blue}\lambda\color{black}\color{red}1$
- \color{red}$\lambda x.\color{blue}\lambda y.\color{red}x \color{black}\longrightarrow \color{red}\lambda\color{black}\color{blue}\lambda\color{black}\color{blue}0$
- \color{red}$(\lambda x.\lambda y. (\lambda x.x)\,y\,x)\, \color{blue}(\lambda y.y\,(\lambda x.x)) \color{black}\longrightarrow \color{red}(\lambda\lambda(\lambda0)\,0\,1)\,\color{blue}(\lambda0(\lambda0))$
* A haskell implementation
#+ATTR_LATEX: :options linenos=true, fontsize=\scriptsize
#+BEGIN_SRC haskell
data Term = Var String 
          | Abs String Term 
          | App Term Term

singleEval :: Term -> Maybe Term
singleEval t =
  case t of
    (App (Abs x t12) v2) | isVal v2 -> Just $ subst x v2 t12
    (App v1@(Abs _ _) t2)           ->      App v1 <$> singleEval t2
    (App t1 t2)                     -> flip App t2 <$> singleEval t1
    _ -> Nothing

multiStepEval :: Term -> Term
multiStepEval t = maybe t multiStepEval (singleEval t)
#+END_SRC
* Simply Typed Lambda Calculus
** Notes
   :PROPERTIES:
   :BEAMER_ENV: note
   :END:
   this is my note
** Left                                                               :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.4
   :BEAMER_opt: [t]
   :END:
*** Syntax
   \scriptsize
   
   \begin{itemize}
   \item[$t :=$] $x$
   \item[] $\lambda x:T.t$
   \item[] $t_1\,t_2$
   \end{itemize}
   
   \begin{itemize}
   \item[$v :=$] $\lambda x:T.t$
   \end{itemize}
   
   \begin{itemize}
   \item[$T :=$] $T \to T$
   \end{itemize}
   
   \begin{itemize}
   \item[$\Gamma :=$] $\varnothing$
   \item[] $\Gamma,\,x:T$
   \end{itemize}
** Right                                                              :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.6
   :BEAMER_opt: [t]
   :END:
*** Evaluation
   \vspace{-10pt}
   \scriptsize
   \begin{prooftree}
   \RightLabel{E-App1}
   \AxiomC{$ t_1 \to t_1' $}
   \UnaryInfC{$ t_1 t_2 \to t_1' t_2 $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{E-App2}
   \AxiomC{$ t_2 \to t_2' $}
   \UnaryInfC{$ v_1 t_2 \to v_1 t_2' $}
   \DisplayProof
   \end{prooftree}
   
   $(\lambda x : T_1_1 . t_1_2)v_2 \to [x  \mapsto v_2]t_1_2$ E-AppAbs
*** Typing
   \vspace{-10pt}
   \scriptsize
   \begin{prooftree}
   \RightLabel{T-Var}
   \AxiomC{$ x : T\,\in\,\Gamma $}
   \UnaryInfC{$ \Gamma \vdash x : T $}
   \DisplayProof
   \end{prooftree}

   \begin{prooftree}
   \RightLabel{T-Abs}
   \AxiomC{$ \Gamma,x : T_1\,\vdash\,t_2:T_2 $}
   \UnaryInfC{$ \Gamma \vdash \lambda x : T_1.t_2 : T_1 \to T_2 $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{T-App}
   \AxiomC{$ \Gamma \,\vdash\,t_1:T_1_1 \to T_1_2 $}
   \AxiomC{$ \Gamma \vdash t_2 : T_1_1 $}
   \BinaryInfC{$ \Gamma \vdash t_1 t_2 : T_1_2 $}
   \DisplayProof
   \end{prooftree}
* Simply Typed Lambda Calculus
** Left                                                               :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :BEAMER_opt: [t]
   :END:
*** Syntax
   \scriptsize
   
   \begin{itemize}
   \item[$t :=$] $x$
   \item[] $\lambda x:T.t$
   \item[] $t_1\,t_2$
   \item[] $Z$
   \item[] $S\,t$
   \item[] $Case\,t_0\,of\,0 \to t_1\,|\, S m \to t_2$
   \end{itemize}
   
   \begin{itemize}
   \item[$v :=$] $\lambda x:T.t$
   \item[] $Z$
   \item[] $S\,v$
   \end{itemize}
   
   \begin{itemize}
   \item[$T :=$] $T \to T$
   \item[] $Nat$
   \end{itemize}
   
   \begin{itemize}
   \item[$\Gamma :=$] $\varnothing$
   \item[] $\Gamma,\,x:T$
   \end{itemize}
** Right                                                              :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.6
   :BEAMER_opt: [t]
   :END:
*** Evaluation
   \vspace{-10pt}
   \scriptsize
   \begin{prooftree}
   \RightLabel{E-App1}
   \AxiomC{$ t_1 \to t_1' $}
   \UnaryInfC{$ t_1 t_2 \to t_1' t_2 $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{E-App2}
   \AxiomC{$ t_2 \to t_2' $}
   \UnaryInfC{$ v_1 t_2 \to v_1 t_2' $}
   \DisplayProof
   \end{prooftree}
   
   $(\lambda x : T_1_1 . t_1_2)v_2 \to [x  \mapsto v_2]t_1_2$ E-AppAbs
*** Typing
   \vspace{-10pt}
   \scriptsize
   \begin{prooftree}
   \RightLabel{T-Var}
   \AxiomC{$ x : T\,\in\,\Gamma $}
   \UnaryInfC{$ \Gamma \vdash x : T $}
   \DisplayProof
   \end{prooftree}

   \begin{prooftree}
   \RightLabel{T-Abs}
   \AxiomC{$ \Gamma,x : T_1\,\vdash\,t_2:T_2 $}
   \UnaryInfC{$ \Gamma \vdash \lambda x : T_1.t_2 : T_1 \to T_2 $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{T-App}
   \AxiomC{$ \Gamma \,\vdash\,t_1:T_1_1 \to T_1_2 $}
   \AxiomC{$ \Gamma \vdash t_2 : T_1_1 $}
   \BinaryInfC{$ \Gamma \vdash t_1 t_2 : T_1_2 $}
   \DisplayProof
   \end{prooftree}
* New Typing Rules
   \begin{prooftree}
   \RightLabel{T-NatZ}
   \AxiomC{}
   \UnaryInfC{$ Z:Nat $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{T-NatS}
   \AxiomC{$ \Gamma \vdash t_1 : Nat $}
   \UnaryInfC{$ S\, t_1 : Nat $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{T-Case}
   \AxiomC{$ \Gamma\vdash \,t_0:Nat $}
   \AxiomC{$ \Gamma\vdash \,t_1:T_1 $}
   \AxiomC{$ \Gamma\vdash \,t_2:T_1 $}
   \TrinaryInfC{$ \Gamma \vdash (Case\, t_0\, of\,0 \to t_1\,|\,(S\, m) \to t_2) : T_1 $}
   \DisplayProof
   \end{prooftree}
* New Evaluation Rules
\begin{prooftree}
\RightLabel{\textbf{E-Succ}}
\AxiomC{$ t_1 \to t_1' $}
\UnaryInfC{$S\,t1'$}
\DisplayProof
\end{prooftree}
\begin{prooftree}
$(Case\,Z\,of$\,0 \to t_1\,|\,S\,m \to t_2) \longrightarrow t1$ \textbf{E-CaseZ}
\end{prooftree}
\begin{prooftree}
$(Case\,(S\,n)\,of\,0 \to t_1\,|\,S\,m \to t_2) \longrightarrow [m \mapsto n]t_2$ \textbf{E-CaseS}
\end{prooftree}
\begin{prooftree}
\RightLabel{\textbf{E-Case}}
\AxiomC{$ t_0 \to t_0' $}
\UnaryInfC{$(Case\,t_0\,of\,0 \to t_1\,|\, S\,m \to t_2)$}
\DisplayProof
 $\longrightarrow(Case\,t_0'\,of\,0 \to t_1\,|\, S\,m \to t_2)$
\end{prooftree}
* Implementation: Terms and Types
#+ATTR_LATEX: :options linenos=true, fontsize=\scriptsize
#+BEGIN_SRC haskell
data Term = Var String
          | Abs String Type Term
          | App Term Term
          | Z
          | S Term
          | Case Term String Term Term
  deriving (Show, Eq)

data Type = Type :-> Type | Nat
  deriving (Show, Eq)

type Context = [(String, Type)]
data TypeErr = TypeError deriving (Show, Eq)
#+END_SRC
* Implementation: Typechecker
#+ATTR_LATEX: :options linenos=true, fontsize=\tiny
#+BEGIN_SRC haskell
newtype TypecheckM a =
  TypecheckM { unTypecheckM :: ExceptT TypeErr (Reader Context) a }
  deriving (Functor, Applicative, Monad, MonadReader Context, MonadError TypeErr)

runTypecheckM :: TypecheckM Type -> Either TypeErr Type
runTypecheckM = flip runReader [] . runExceptT . unTypecheckM

typecheck :: Term -> TypecheckM Type
typecheck = \case
  Var x -> do
    ty <- asks $ lookup x
    maybe (throwError TypeError) pure ty
  Abs bndr ty1 trm -> do
    ty2 <- local ((:) (bndr, ty1)) (typecheck trm)
    pure $ ty1 :-> ty2
  App t1 t2 -> do
    ty1 <- typecheck t1
    case ty1 of
      tyA :-> tyB -> do
        ty2 <- typecheck t2
        if tyB == ty2 then pure ty1 else throwError TypeError
      _ -> throwError TypeError
  Z -> pure Nat
  S n -> do
    ty <- typecheck n
    if ty == Nat then pure Nat else throwError TypeError
  Case t0 bndr t1 t2 -> do
    ty0 <- typecheck t0
    ty1 <- typecheck t1
    ty2 <- local ((:) (bndr, ty1)) (typecheck t2)
    if ty0 == Nat && ty1 == ty2
      then pure ty1
      else throwError TypeError
#+END_SRC
* Implementation: Evaluator
#+ATTR_LATEX: :options linenos=true, fontsize=\scriptsize
#+BEGIN_SRC haskell
  singleEval :: Term -> Maybe Term
  singleEval = \case
    (App (Abs x ty t12) v2) | isVal v2 -> Just $ subst x v2 t12
    (App v1@Abs{} t2) -> App v1 <$> singleEval t2
    (App t1 t2) -> flip App t2 <$> singleEval t1
    (S t) | not (isVal t) -> S <$> singleEval t
    (Case t0 bndr t1 t2) | not (isVal t0) -> 
        singleEval t0 >>= \t0' -> pure $ Case t0' bndr t1 t2
    (Case v1 bndr t1 t2) | v1 == Z -> pure t1
    (Case (S v1) bndr t1 t2) -> Just $ subst bndr v1 t2
    _ -> Nothing
#+END_SRC
* All Done
\center
Thank You!
https://github.com/ssbothwell/SimplyTypedPresentation/
https://github.com/ssbothwell/HowardLang
# Local Variables:
# after-save-hook: (org-beamer-export-to-pdf)
# End:
* Bonus Round: Godel's System T
* Syntax
** Left                                                               :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.5
   :BEAMER_opt: [t]
   :END:
   \begin{itemize}
   \item[$t :=$] $x$
   \item[] $\lambda x:T.t$
   \item[] $t_1\,t_2$
   \item[] $True$
   \item[] $False$
   \item[] $if \, t1 \, then \, t2 \, else \, t3$
   \item[] $Z$
   \item[] $S\,t$
   \item[] $rec \, t1 \, t2$
   \end{itemize}
   
** Right                                                              :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.5
   :BEAMER_opt: [t]
   :END:
   \begin{itemize}
   \item[$v :=$] $\lambda x:T.t$
   \item[] $True$
   \item[] $False$
   \item[] $Z$
   \item[] $S\,v$
   \end{itemize}
   
   \begin{itemize}
   \item[$T :=$] $T \to T$
   \item[] $Nat$
   \item[] $Bool$
   \end{itemize}
   
   \begin{itemize}
   \item[$\Gamma :=$] $\varnothing$
   \item[] $\Gamma,\,x:T$
   \end{itemize}
* Typing
** Left
   :PROPERTIES:
   :BEAMER_col: 0.4
   :BEAMER_opt: [t]
   :END:
   \tiny
   \begin{prooftree}
   \RightLabel{T-Var}
   \AxiomC{$ x : T\,\in\,\Gamma $}
   \UnaryInfC{$ \Gamma \vdash x : T $}
   \DisplayProof
   \end{prooftree}

   \begin{prooftree}
   \RightLabel{T-Abs}
   \AxiomC{$ \Gamma,x : T_1\,\vdash\,t_2:T_2 $}
   \UnaryInfC{$ \Gamma \vdash \lambda x : T_1.t_2 : T_1 \to T_2 $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{T-App}
   \AxiomC{$ \Gamma \,\vdash\,t_1:T_1_1 \to T_1_2 $}
   \AxiomC{$ \Gamma \vdash t_2 : T_1_1 $}
   \BinaryInfC{$ \Gamma \vdash t_1 t_2 : T_1_2 $}
   \DisplayProof
   \end{prooftree}

   \begin{prooftree}
   \RightLabel{T-NatZ}
   \AxiomC{}
   \UnaryInfC{$ Z:Nat $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{T-NatS}
   \AxiomC{$ \Gamma \vdash t_1 : Nat $}
   \UnaryInfC{$ S\, t_1 : Nat $}
   \DisplayProof
   \end{prooftree}
** Right   
   :PROPERTIES:
   :BEAMER_col: 0.6
   :BEAMER_opt: [t]
   :END:

   \tiny
   \begin{prooftree}
   \RightLabel{T-NatRec}
   \AxiomC{$\Gamma \vdash base: T$}
   \AxiomC{$\Gamma \vdash step: Nat \to T \to T$}
   \BinaryInfC{$(rec\, base\, step) : Nat \to T$}
   \DisplayProof
   \end{prooftree}

   \begin{prooftree}
   \RightLabel{T-BoolF}
   \AxiomC{}
   \UnaryInfC{$ False:Bool $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{T-BoolT}
   \AxiomC{}
   \UnaryInfC{$ True:Bool $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{T-BoolIf}
   \AxiomC{$ \Gamma \vdash p_1 : Bool $}
   \AxiomC{$ \Gamma \vdash t_1 : T $}
   \AxiomC{$ \Gamma \vdash t_2 : T $}
   \TrinaryInfC{$ (if\,p_1\,then\,t_1\,else\,t_2) : T $}
   \DisplayProof
   \end{prooftree}
* Evaluation
** Left
   :PROPERTIES:
   :BEAMER_col: 0.5
   :BEAMER_opt: [t]
   :END:
   \scriptsize
   \begin{prooftree}
   \RightLabel{E-App1}
   \AxiomC{$ t_1 \to t_1' $}
   \UnaryInfC{$ t_1 t_2 \to t_1' t_2 $}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{E-App2}
   \AxiomC{$ t_2 \to t_2' $}
   \UnaryInfC{$ v_1 t_2 \to v_1 t_2' $}
   \DisplayProof
   \end{prooftree}
   
   $(\lambda x : T_1_1 . t_1_2)v_2 \to [x  \mapsto v_2]t_1_2$ E-AppAbs

   \begin{prooftree}
   \RightLabel{E-Succ}
   \AxiomC{$ t_1 \to t_1' $}
   \UnaryInfC{$S\,t1'$}
   \DisplayProof
   \end{prooftree}
   
** Right
   :PROPERTIES:
   :BEAMER_col: 0.5
   :BEAMER_opt: [t]
   :END:
   \tiny
   
   \begin{prooftree}
   \RightLabel{E-NatBase}
   \AxiomC{}
   \UnaryInfC{$rec\,base\,step\,0 \to base$}
   \DisplayProof
   \end{prooftree}
   \begin{prooftree}

   \RightLabel{E-NatRec}
   \AxiomC{}
   \UnaryInfC{$rec\,base\,step\,(S\,n) \to rec\,base\,step\,n$}
   \DisplayProof
   \end{prooftree}

   \begin{prooftree}
   \RightLabel{E-If}
   \AxiomC{$ t_1 \to t_1' $}
   \UnaryInfC{$if\, t_1\, then\, t_2\, else\, t_3 \to if\, t_1'\, then\, t_2\, else\, t_3$}
   \DisplayProof
   \end{prooftree}

   \begin{prooftree}
   \RightLabel{E-IfTrue}
   \AxiomC{}
   \UnaryInfC{$if\, True\, then\, t_2\, else\, t_3 \to t_2$}
   \DisplayProof
   \end{prooftree}
   
   \begin{prooftree}
   \RightLabel{E-IfFalse}
   \AxiomC{}
   \UnaryInfC{$if\, False\, then\, t_2\, else\, t_3 \to t_3$}
   \DisplayProof
   \end{prooftree}
